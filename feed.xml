<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://dudududukim.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://dudududukim.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-06-11T23:31:36+00:00</updated><id>https://dudududukim.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Cursor &amp;amp; Lovable</title><link href="https://dudududukim.github.io/blog/2025/lovable_curosr/" rel="alternate" type="text/html" title="Cursor &amp;amp; Lovable"/><published>2025-05-20T08:52:04+00:00</published><updated>2025-05-20T08:52:04+00:00</updated><id>https://dudududukim.github.io/blog/2025/lovable_curosr</id><content type="html" xml:base="https://dudududukim.github.io/blog/2025/lovable_curosr/"><![CDATA[<p>vibe debugging</p> <p>lovable = infa까지 처리해줌</p> <p>하이브리드 어플리케이션 (MVP + 1단계)</p> <p>IA/FSD -&gt; web_app 개발시 기획</p> <h2 id="1-관심사">1. 관심사</h2> <p>필름사진, 여행, 대학원, 나에게 맞는 분야를 찾는게 힘들더라, 내 전공을 버리고 다른 분야를 가도 되는가?(상담) 나의 관심사를 지속적으로 트랙해주고 정리해주면 좋겠어.</p> <h2 id="2-웹앱-아이디어-구상">2. 웹앱 아이디어 구상</h2> <h2 id="3-메인기능-구상">3. 메인기능 구상</h2> <h2 id="4-유저의-행동-상상">4. 유저의 행동 상상</h2> <h2 id="5-세계관-상상">5. 세계관 상상</h2> <역할> 너는 바이브코딩 프로젝트를 만드는 기획자야. 내 입력을 참고하되, 이것에 국한되지 않게 내용을 보충해서 기획서를 만들어. <포함해> 사이트맵, 사이트별 핵심기능, 사이트별 UI 구성, 데이터명세, 디자인가이드, … <포함하지마> 기술스택 명세, 코드, 향후고려사항, 너무 상세한 기술명세 <개발스테이지> 단계별로 개발스테이지를 나눠서 개발하도록 해. Stage 는 3개로 만들어.각 단계에서 작동 가능하게 해줘. - 1단계: 초반에는 프론트 먼저 만들고, 백엔드 없이도 동작 하게 해줘. - 2단계: REST API 방식의 백엔드를 모두 구현해줘. - 3단계: 실시간 관련 동작을 모두 구현해줘. <출력> 결과는 마크다운(md) 형식으로 줘. 표 사용하지 마. Canvas 로 보여줘. <웹앱의 목표=""> 지금 나의 전공 적합도를 점수로 나타내는 사이트. 접속 시 전공, 학교, 성별 등을 넣어서 해당 전공별 문항을 기준에 맞춰서 llm이 선정하고 사용자가 답변을 주면 점수를 메겨줌. 질문에는 다른 분야로의 관심사가 있는지 기본 질문들(적성검사 등)도 랜덤하게 섞어서 제공. 포션은 사용자가 더 바꾸고 싶은 마음이 높을 수록 기본 질문들을 더 제공함. types 처럼 재미요소를 챙길 수도 진지하게 자신의 진로를 고민할 수도 있는 계기를 제공함. 간단한 검사 이후에는 상담을 신청할 수도 있게. <메인기능> 자신의 답변을 바탕으로 한줄 요약을 생성하고, 해당 요약으로 png 캐릭터를 출력. 주기적으로 질문을 업데이트하면서 사용자의 관심사를 tracking 가능. 누적된 데이터를 바탕으로 사용자에 더 fit한 정보를 제공할 수 있음. 결국 자신의 페이지까지 연결되면 좋겠음. 아니면 차라리 홈페이지를 설문을 통해서 제공하는것도 낫베드. 일시적으로 자신의 domain을 부여해서 공유할 수 있도록. 다양한 검사의 결과를 자신의 페이지에 나열. <유저흐름> 첫 페이지는 무조건 로그인, 계정 연결로그인. 아이디 기반으로 자신의 친구들도 추가 가능. 각 페이지에는 각 친구들이 검사한 결과가 정리되어 있음. 나의 경우에는 로그인 시에 treding 검사가 가장 먼저 뜸. 일단 전공 부적합도 검사를 default로 해서 파생 검사들을 연결(llm이 계속해서 자체적으로 검사지를 생성함) 전공으로 시작된 자신의 사이트가 결국 자신의 진정한 관심사를 탐구하고, 지인들과 공유하고 트랙할 수 있는 사이트. <고려사항> 룩? 그냥 사용자의 이름을 최상단에 띄우고, 메인 화면에 자신과 같은 전공 거리감을 가지거나, 관심사를 공유하는 친구들이 보여짐. 클릭하면 해당 친구의 사이트로 이동. 검사 결과들이 보이고, 시간 순으로 gpt가 재미나게 이야기를 정리해두었음. 위아래 스크롤이 아니라 양옆 스크롤 -&gt; 꽤나 구체적이여야 하고, 아이디어 자체의 구체화가 단계를 거듭하면서 더 새로운 아이디어가 결합됨. ## 강화프롬프트(강의제공) &gt; <역할> 너는 바이브코딩 프로젝트를 만드는 기획자야. 내 입력을 참고하되, 이것에 국한되지 않게 내용을 보충해서 기획서를 만들어. <포함해> 사이트맵, 사이트별 핵심기능, 사이트별 UI 구성, 데이터명세, 디자인가이드, … <포함하지마> 기술스택 명세, 코드, 향후고려사항, 너무 상세한 기술명세 <개발스테이지> 단계별로 개발스테이지를 나눠서 개발하도록 해. Stage 는 3개로 만들어.각 단계에서 작동 가능하게 해줘. - 1단계: 초반에는 프론트 먼저 만들고, 백엔드 없이도 동작 하게 해줘. - 2단계: REST API 방식의 백엔드를 모두 구현해줘. - 3단계: 실시간 관련 동작을 모두 구현해줘. <출력> 결과는 마크다운(md) 형식으로 줘. 표 사용하지 마. Canvas 로 보여줘. # GPT 이성 출력 결과 ## 🎯 프로젝트 개요 * **서비스명**: 바이브코딩 * **목표**: 사용자의 전공 적합도를 측정하고, LLM 기반의 dynamic questionnaire를 통해 진로 탐색과 친구들과의 공유/트래킹 기능을 제공 * **핵심 Flow**: 로그인 → 기본 검사(전공 적합도) → 답변 기반 추천 및 요약 생성 → PNG 캐릭터 생성 → 추가 검사/상담 신청 → 개인 도메인 공유 --- ## 🚀 Development Stages ### Stage 1: Front-end Only * **목표**: 백엔드 없이도 동작 가능한 프로토타입 구현 * **기능**: * 로그인/Sign-in 화면 (+ OAuth 연결) * Questionnaire UI (dynamic question render via mock data) * 답변 입력 및 요약 생성(Mock LLM API 호출) * PNG 캐릭터 display (mock image URL) * 친구 리스트 스크롤 UI (side-scroll) ### Stage 2: REST API Backend * **목표**: 모든 UI 요소에 실제 REST API 연동 * **기능**: * User Auth API (sign-up, sign-in, session) * Questionnaire API (fetch questions, submit answers) * LLM Summary API (실제 GPT 호출) * Image Generation API (PNG 캐릭터 생성) * User Data CRUD API (프로필, 친구, 검사 결과) ### Stage 3: Real-time Features * **목표**: WebSocket/Realtime 연동으로 즉각적인 피드백 및 친구 추적 * **기능**: * Real-time questionnaire progress tracking (Socket.io) * Live feed: 친구들의 검사 시작/완료 알림 * 채팅/상담 신청 실시간 알림 --- ## 🗺️ Sitemap * **/login** * **/dashboard** * Trending Tests * My Major Fit Test * 친구 피드 (side-scroll) * **/test/\:id** * Question 화면 * 실시간 Progress Bar * **/result/\:id** * Summary &amp; PNG Character * Recommend Tests &amp; 상담 신청 * **/profile/\:username** * 개인 결과 &amp; 공유 도메인 * Test history timeline --- ## 💡 Site별 핵심 기능 ### Login Page * OAuth social sign-in * Traditional email/password ### Dashboard * Trending Tests list * My Major Fit Test Quick Start * Friends Carousel (side-scroll) ### Test Page * Dynamic Questionnaire (LLM-driven) * 기본 vs 관심사 기반 question mix * 실시간 progress ### Result Page * One-line summary (LLM) * PNG Character display * 상담 신청 버튼 ### Profile Page * Personal Test History timeline * Domain sharing link --- ## 🎨 UI 구성 * **Color Scheme**: soft pastel base (light backgrounds), accent color for CTAs * **Typography**: Headlines: 2xl, Body: base, Buttons: lg * **Layout**: * Side-scroll carousel for 친구 * Center card for questionnaire * Bottom-fixed CTA bar on mobile * Responsive design (Flex, Grid) --- ## 🗂️ Data Specification * **User**: id, name, email, gender, major, school, domain * **Test**: id, title, description, category, questions\[] * **Question**: id, prompt, type, options\[], weight * **Answer**: userId, questionId, response, timestamp * **Result**: userId, testId, score, summary, characterUrl, timestamp * **FriendLink**: userId, friendId, sharedDomain --- ## 🎨 Design Guide * **Logo &amp; Branding**: Simple vibey icon + logotype * **Iconography**: flat, rounded SVG icons * **Button**: 2xl rounded corners, shadow, hover transition * **Interaction**: smooth animation (Framer Motion suggestion) * **Spacing**: padding p-4 이상, margin m-4 * **Emotion**: 😉 friendly tone, playful UI 요소 mix &gt; *기술적 용어는 영어로 표기했습니다. 이모지를 적절히 사용하여 기획서를 밝고 기분 좋게 구성했어요!* # Lovable 사용하기 [운동소모임 앱] (운동 소모임 앱) <역할> 너는 바이브코딩 프로젝트를 만드는 기획자야. 내 입력을 참고하되, 이것에 국한되지 않게 내용을 보충해서 기획서를 만들어. <포함해> 사이트맵, 사이트별 핵심기능, 사이트별 UI 구성, 데이터명세, 디자인가이드, … <포함하지마> 기술스택 명세, 코드, 향후고려사항, 너무 상세한 기술명세 <개발스테이지> 단계별로 개발스테이지를 나눠서 개발하도록 해. Stage 는 3개로 만들어.각 단계에서 작동 가능하게 해줘. - 1단계: 초반에는 프론트 먼저 만들고, 백엔드 없이도 동작 하게 해줘. - 2단계: REST API 방식의 백엔드를 모두 구현해줘. - 3단계: 실시간 관련 동작을 모두 구현해줘. <출력> 결과는 마크다운(md) 형식으로 줘. 표 사용하지 마. spec.md 파일로 다운받을 파일을 줘. (이하 요구사항) <웹앱 목표=""> 소모임 어플을 만들자. 사람들을 소모임으로 연결시키자. <핵심기능 구상=""> 핵심기능은 모임방이야. 유저들이 메인페이지에서 모임방을 직접 만들 수 있게 할거야. 유저들은 모임방에서 모임방에서 채팅도 하고, 참석/참석취소 를 할 수 있어. <유저흐름 구상=""> 랜딩페이지(대기실): 모임방의 리스트를 볼 수 있음. 카테고리로 필터링 가능. 모임방 이름으로 검색 가능. 모임방의 타이틀, 날짜, 시간, 카테고리, 현재 참석인원 숫자, 최대인원 숫자, 모임장이름 모임방 만들기: 대기실의 '모임방 만들기' 를 클릭해서 모임방 만드는 페이지로 가. 모임방을 만들 때 타이틀, 날짜, 시간, 카테고리, 최대인원 등을 설정해야해. 모임방을 만든 사람은 모임장이 되고, 모임장만 내용을 수정할 수 있어. 모임방 들어가기: 유저는 메인페이지의 모임방을 클릭하고 들어갈거야. 모임방에 들어가면 모임방에 들어온 사람들과 실시간 채팅이 가능해야하고, 모임에 참석할 사람들의 리스트를 확인할 수 있어야 해. 모임방에 참석/참석취소를 할 수 있게 할거야. <고려사항> 로그인: 대기실에서 모임방 리스트는 로그인 안해도 보여야하고, 모임방을 생성하거나 들어갈 땐 로그인 해야해. 유저는 가입할 때 닉네임을 설정해야해. 카테고리: 운동소모임 어플이니까, 카테고리는 러닝/테니스/농구/축구/탁구 등 으로 해줘. 룩&amp;필: 운동소모임 어플이니까, sporty 하게 black &amp; blue 계열을 쓰고 운동관련 이미지&amp;이모지를 넣어줘. 어플이름: Enthes(enjoy the squash) ## lovable용 heading script &gt; 아래 입력내용을 root 폴더의 spec.md 에 저장해. spec.md 를 읽고 어떻게 개발 할 지 생각해. 너는 언제나 spec.md 파일을 읽고 개발을 할거야. Stage 1을 모두 개발해봐. spec.md ``` ``` </고려사항></유저흐름></핵심기능></웹앱></출력></개발스테이지></포함하지마></포함해></역할></출력></개발스테이지></포함하지마></포함해></역할></고려사항></유저흐름></메인기능></웹앱의></출력></개발스테이지></포함하지마></포함해></역할>]]></content><author><name></name></author><category term="work"/><category term="work"/><category term="web"/><summary type="html"><![CDATA[AI agent-powered development workflow using Lovable for automated web application development.]]></summary></entry><entry><title type="html">Best Practices for PyTorch Training</title><link href="https://dudududukim.github.io/blog/2025/good_code_for_pytorch-copy/" rel="alternate" type="text/html" title="Best Practices for PyTorch Training"/><published>2025-04-21T00:26:47+00:00</published><updated>2025-04-21T00:26:47+00:00</updated><id>https://dudududukim.github.io/blog/2025/good_code_for_pytorch%20copy</id><content type="html" xml:base="https://dudududukim.github.io/blog/2025/good_code_for_pytorch-copy/"><![CDATA[<div align="left"> <sub> Summurized by <i>Duhyeon Kim</i> w/o LLMs</sub> <br/> <br/> </div> <h3 id="naming-convention">Naming Convention</h3> <table> <thead> <tr> <th>Type</th> <th>Convention</th> <th>Example</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">Packages &amp; Modules</code></td> <td>lower_with_under</td> <td>from <strong>prefetch_generator</strong> import BackgroundGenerator</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Classes</code></td> <td>CapWords</td> <td>class <strong>DataLoader</strong></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Constants</code></td> <td>CAPS_WITH_UNDER</td> <td><strong>BATCH_SIZE=16</strong></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Instances</code></td> <td>lower_with_under</td> <td><strong>dataset</strong> = Dataset</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Methods &amp; Functions</code></td> <td>lower_with_under()</td> <td>def <strong>visualize_tensor()</strong></td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">Variables</code></td> <td>lower_with_under</td> <td><strong>background_color=’Blue’</strong></td> </tr> </tbody> </table> <p><br/>👍 해당 github에서 말하는 내용을 내가 격어왔다는 점은 꽤나 흥미로웠다<br/>(특히 jupyter notebook으로 다양하게 실험하고, python script로 넘어와서 train deploy 수준의 reproducibility를 높였다는 점)</p> <hr/> <h3 id="commonly-used-libraries">Commonly used libraries:</h3> <table> <thead> <tr> <th>Name</th> <th>Description</th> <th>Used for</th> </tr> </thead> <tbody> <tr> <td><a href="https://pytorch.org/">torch</a></td> <td>Base Framework for working with neural networks</td> <td>creating tensors, networks and training them using backprop</td> </tr> <tr> <td><a href="https://pytorch.org/docs/stable/torchvision">torchvision</a></td> <td>PyTorch <strong>computer vision</strong> modules</td> <td>image data preprocessing, augmentation, postprocessing</td> </tr> <tr> <td><a href="https://pillow.readthedocs.io/en/stable/">Pillow (PIL)</a></td> <td>Python Imaging Library</td> <td>Loading images and storing them</td> </tr> <tr> <td><a href="https://www.numpy.org/">Numpy</a></td> <td>Package for <strong>scientific computing</strong> with Python</td> <td>Data preprocessing &amp; postprocessing</td> </tr> <tr> <td><a href="https://pypi.org/project/prefetch_generator/">prefetch_generator</a></td> <td>Library for background processing</td> <td><strong>Loading next batch</strong> in background during computation</td> </tr> <tr> <td><a href="https://github.com/tqdm/tqdm">tqdm</a></td> <td><strong>Progress bar</strong></td> <td>Progress during training of each epoch</td> </tr> <tr> <td><a href="https://github.com/TylerYep/torchinfo">torchinfo</a></td> <td>Print Keras-like model summary for PyTorch</td> <td><strong>Displays network</strong>, it’s parameters and sizes at each layer</td> </tr> <tr> <td><a href="https://pytorch.org/docs/stable/tensorboard.html">torch.utils.tensorboard</a></td> <td><strong>Tensorboard</strong> within PyTorch</td> <td>Logging experiments and showing them in tensorboard</td> </tr> </tbody> </table> <p><br/>🧐 prefetch_generator 빼고는 다 씀 (생산성 및 학습 안정성을 위해서), prefetch_generator를 사용해보아야 겠다.</p> <hr/> <h3 id="file-organization">File organization</h3> <ul> <li>layer, losses, ops 와 같이 분리해 두고</li> <li>Main model은 model_name.py로 파일을 설정한다.</li> </ul> <p>Finally trainiing and test code imports only the final model_name.py module</p> <hr/> <h3 id="building-nn">Building NN</h3> <p>Loss function도 nn.Module로 해서 computation graph에 자연스럽게 녹아들도록 설계한다.</p> <p>torchviz를 활용한 computation graph visualization</p> <p><img src="https://dudududukim.github.io/assets/img/comput_graph.png" alt="설명" height="400"/></p> <p>Vgg perceptual loss 같은 경우에, pretrained model의 .feature 을 불러와서 각 silce nn.Sequential module에 .add_module을 이용해서 for문으로 모델을 분리한다. 또한 requires_grad=False로 model을 freeze한다.</p> <hr/> <h3 id="train-code-structure">Train Code Structure</h3> <div style="border: 1px solid var(--global-theme-color-light); padding: 1em; border-radius: 4px; background-color: var(--global-theme-bg);"> <p><strong>Import</strong><br/> <strong>seed</strong></p> <p><strong>(Main)</strong><br/>     ㄴ argparse<br/>     ㄴ dataset transform<br/>     ㄴ dataset / dataloader<br/>     ㄴ instantiate network<br/>     ㄴ create loss<br/>     ㄴ device setting (cuda, mps)<br/>     ㄴ create optimizer<br/>     ㄴ load checkpoint if needed<br/>     ㄴ create tensorboard writer</p> <p><strong>(Main Loop)</strong><br/>     ㄴ Set model to train mode<br/>     ㄴ Use prefetch_generator and tqdm to iterate through data</p> <p>    ㄴ Forward / backward (zero_grad, backward, step)<br/>     ㄴ Update writer<br/>     ㄴ Compute computation time and <strong>compute_efficiency</strong><br/>     ㄴ Test code (optional)<br/>     ㄴ Save checkpoint (if needed)</p> </div> <blockquote> <p><strong>Tip:</strong> It is very good practice to track both preparation time and computation time using tqdm to detect any issues in your dataloader.</p> </blockquote> <p><strong>적용해 볼 점 :</strong></p> <ol> <li>data_prefetcher</li> <li>data loading time과 computation time을 분석해서 computation efficiency check할 것</li> </ol> <p>아래는 요청하신 내용을 <em>가독성</em> 있게 <strong>kramdown</strong> 형식으로 재구성한 버전입니다.<br/> <code class="language-plaintext highlighter-rouge">text</code>와 <em>text</em>를 적극적으로 활용했고, 원래의 의미와 내용은 그대로 유지했습니다.</p> <hr/> <h3 id="dos-and-donts">Do’s and Don’t’s</h3> <h5 id="x-donts">:x: Don’ts</h5> <ul> <li> <p><strong>Avoid using <code class="language-plaintext highlighter-rouge">numpy</code> in the <code class="language-plaintext highlighter-rouge">forward</code> method</strong> of <code class="language-plaintext highlighter-rouge">nn.Module</code><br/> <em>Numpy runs on CPU only. PyTorch supports most numpy functions, so use torch equivalents for GPU compatibility!</em></p> </li> <li> <p><strong>Don’t log results in every step</strong><br/> <em>Typically, models train for thousands of steps. Logging loss and results every <code class="language-plaintext highlighter-rouge">n</code>th step is enough to reduce overhead.</em><br/> <em>Especially, saving intermediate results as images can be costly during training.</em></p> </li> </ul> <h5 id="white_check_mark-dos">:white_check_mark: Do’s</h5> <ul> <li> <p><strong>Use command-line arguments</strong><br/> <em>You can track training arguments by using</em> f.write(opt.<strong>str</strong>()) <em>to save them.</em></p> </li> <li> <p><strong>Use <code class="language-plaintext highlighter-rouge">.detach()</code> to free tensors from the computation graph</strong><br/> <em>If you don’t need gradients, detach tensors to save memory and computation.</em></p> </li> <li> <p><strong>Use <code class="language-plaintext highlighter-rouge">.item()</code> when printing scalar tensors</strong><br/> <em>This converts a single-value tensor to a standard Python number for easier printing.</em></p> </li> <li> <p><strong>Use the <code class="language-plaintext highlighter-rouge">__call__</code> method instead of <code class="language-plaintext highlighter-rouge">forward</code> on a <code class="language-plaintext highlighter-rouge">nn.Module</code></strong><br/> <em>Calling the module directly (e.g., <code class="language-plaintext highlighter-rouge">model(input)</code>) is preferred over explicitly calling <code class="language-plaintext highlighter-rouge">model.forward(input)</code>.</em></p> </li> </ul> <hr/> <h3 id="soso-tips">soso Tips</h3> <p>We can use virtual batch (accumulating grad and updating on virtual batch size)</p> <hr/> <h3 id="references-">References :</h3> <p><a href="https://peps.python.org/pep-0008/">PEP 8 – Style Guide for Python Code</a><br/> <a href="https://github.com/IgorSusmelj/pytorch-styleguide">A PyTorch Tools, best practices &amp; Styleguide</a><br/> <a href="https://bnikolic.co.uk/blog/pytorch-detach.html">Pytorch .detach()</a><br/> <a href="https://github.com/google/styleguide/blob/gh-pages/pyguide.md">Google pyguide</a></p>]]></content><author><name></name></author><category term="programming"/><category term="pytorch"/><category term="ML"/><summary type="html"><![CDATA[Clean, efficient PyTorch code conventions, libraries, structure, best practices.]]></summary></entry><entry><title type="html">Tips to write blog .md</title><link href="https://dudududukim.github.io/blog/2025/key_features_of_blog/" rel="alternate" type="text/html" title="Tips to write blog .md"/><published>2025-04-19T06:47:00+00:00</published><updated>2025-04-19T06:47:00+00:00</updated><id>https://dudududukim.github.io/blog/2025/key_features_of_blog</id><content type="html" xml:base="https://dudududukim.github.io/blog/2025/key_features_of_blog/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>This blog post highlights the key features of to write the posts markdwon.</p> <h2 id="tips">Tips</h2> <h3 id="tabs-for-something-else"><br/>Tabs for something else</h3> <p>! You should have <code class="language-plaintext highlighter-rouge">tabs: true</code> in the YAML front matter.</p> <ul id="something-else" class="tab" data-tab="1d174261-76fd-4d48-a95b-a097a950e747" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="1d174261-76fd-4d48-a95b-a097a950e747" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul> <h3 id="post-with-citation"><br/>post with citation</h3> <p>If you place <code class="language-plaintext highlighter-rouge">citation: true</code> in the YAML front matter, it displays the citation reference in the below of the post.</p> <h3 id="image-with-fancy-options"><br/>Image with fancy options</h3> <p>You can check the forms in the <a href="/blog/2024/advanced-images/">Advanced Image</a>.</p> <p>You should place the key options in the YAML front matter, too!</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">images</span><span class="pi">:</span>
  <span class="na">compare</span><span class="pi">:</span> <span class="kc">true</span>
  <span class="na">slider</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div> <h3 id="w-jupyter-notebook"><br/>w jupyter notebook</h3> <p>There exits a <a href="https://github.com/red-data-tools/jekyll-jupyter-notebook">Jekyll Jupyter Notebook plugin</a>.<br/> It convets the jupyter notebook to html site.<br/> Since <a href="https://jekyllrb.com/docs/configuration/markdown/">Kramdown</a> automatically renders the jekyll’s markdown, we should use the <a href="https://kramdown.gettalong.org/syntax.html#extensions">::nomarkdown</a> tag to process the following text without Kramdown.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
{::nomarkdown}
{% assign jupyter_path = "assets/jupyter/blog.ipynb" | relative_url %}
{% capture notebook_exists %}{% file_exists assets/jupyter/blog.ipynb %}{% endcapture %}
{% if notebook_exists == "true" %}
{% jupyter_notebook jupyter_path %}
{% else %}

&lt;p&gt;Sorry, the notebook you are looking for does not exist.&lt;/p&gt;
{% endif %}
{:/nomarkdown}

</code></pre></div></div> <p>No front matter is needed, only the nomarkdwon tag!<br/> You can see the randering results in <a href="/blog/2023/jupyter-notebook/">a post with jupyter notebook</a></p> <h3 id="custom-blockquotes"><br/>Custom blockquotes</h3> <p>You can use pre-defined scss for the quote block.</p> <p>The examples are below.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <p>The <code class="language-plaintext highlighter-rouge">{: .block-warning }</code> makes the former quote block changed to the additional scss.</p> <p>More options : <code class="language-plaintext highlighter-rouge">{: .block-tip }</code>, <code class="language-plaintext highlighter-rouge">{: .block-danger }</code></p> <h3 id="post-with-table-of-contents"><br/>Post with table of contents</h3> <p>YAML front matter</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div> <p>More customization of toc can be learned through <a href="https://afeld.github.io/bootstrap-toc/">bootstrap-toc</a>.</p> <h3 id="redirct-post"><br/>Redirct post</h3> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">redirect</span><span class="pi">:</span> <span class="s">/assets/pdf/example_pdf.pdf</span>
</code></pre></div></div> <p>It directly redirct to the file.<br/> Example page in <a href="/blog/2022/redirect/">a post with redirect</a></p> <h3 id="math-post"><br/>Math post</h3> <p>You can use expression with <code class="language-plaintext highlighter-rouge">$$</code>.<br/> You should follow the grammar of <a href="https://www.mathjax.org/">MathJax 3</a> engine.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$$
\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2
$$
</code></pre></div></div> \[\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2\] <h3 id="code-post"><br/>Code post</h3> <p>Basically you can write code with <code class="language-plaintext highlighter-rouge">\</code>`` c++`.<br/> As the number of line is false for default. You can use below argument.</p> <pre><code class="language-markdwon">
{% highlight c++ linenos %}
{% endhighlihgt %}

</code></pre> <h3 id="zoomable-image"><br/>Zoomable-image</h3> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">thumbnail</span><span class="pi">:</span> <span class="s">assets/img/9.jpg</span>
</code></pre></div></div> <p>Using the thumbnail yml, you can display the image in the home.</p> <p>To use the <code class="language-plaintext highlighter-rouge">zoomable=true</code> see the full source code in <a href="https://github.com/alshedivat/al-folio/blob/main/_posts/2015-05-15-images.md">a post with images source code</a>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="basic-formatting"><br/>Basic formatting</h3> <h4 id="check-list">Check List</h4> <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked"/>Brush Teeth</li> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/>Put on socks <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked"/>Put on left sock</li> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/>Put on right sock</li> </ul> </li> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked"/>Go to school</li> </ul> <p>You can simple apply check list with md, but i don’t i will use it frequently…😕</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">#### Check List</span>
<span class="p">
-</span> [x] Brush Teeth
<span class="p">-</span> [ ] Put on socks
<span class="p">  -</span> [x] Put on left sock
<span class="p">  -</span> [ ] Put on right sock
<span class="p">-</span> [x] Go to school
</code></pre></div></div> <hr/> <h3 id="other-options"><br/>Other options</h3> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">pseudocode</span><span class="pi">:</span> <span class="kc">true</span>
<span class="na">chart</span><span class="pi">:</span>
  <span class="na">vega_lite</span><span class="pi">:</span> <span class="kc">true</span>
  <span class="na">echarts</span><span class="pi">:</span> <span class="kc">true</span>
  <span class="na">chartjs</span><span class="pi">:</span> <span class="kc">true</span>
<span class="na">code_diff</span><span class="pi">:</span> <span class="kc">true</span>
<span class="na">map</span><span class="pi">:</span> <span class="kc">true</span>                   <span class="c1"># geojson</span>
<span class="na">pretty_table</span><span class="pi">:</span> <span class="kc">true</span>          <span class="c1"># bootstrap table</span>
<span class="na">toc</span><span class="pi">:</span>
  <span class="na">beginning</span><span class="pi">:</span> <span class="kc">true</span>
<span class="na">giscus_comments</span><span class="pi">:</span> <span class="kc">true</span>
<span class="na">mermaid</span><span class="pi">:</span>                    <span class="c1"># diagram JS</span>
  <span class="na">enabled</span><span class="pi">:</span> <span class="kc">true</span>
  <span class="na">zoomable</span><span class="pi">:</span> <span class="kc">true</span>
<span class="na">layout </span><span class="pi">:</span> <span class="s">distill</span>            <span class="c1"># distill form layout : check for further usage</span>
<span class="na">featured </span><span class="pi">:</span> <span class="kc">true</span>             <span class="c1"># pinned in the blog home</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="jekyll"/><category term="tips"/><category term="markdown"/><category term="Kramdown"/><summary type="html"><![CDATA[this is the page for me to write the _posts markdown]]></summary></entry><entry><title type="html">a post with plotly.js</title><link href="https://dudududukim.github.io/blog/2025/plotly/" rel="alternate" type="text/html" title="a post with plotly.js"/><published>2025-03-26T14:24:00+00:00</published><updated>2025-03-26T14:24:00+00:00</updated><id>https://dudududukim.github.io/blog/2025/plotly</id><content type="html" xml:base="https://dudududukim.github.io/blog/2025/plotly/"><![CDATA[<p>This is an example post with some <a href="https://plotly.com/javascript/">plotly</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included plotly.js code could look like]]></summary></entry><entry><title type="html">a post with image galleries</title><link href="https://dudududukim.github.io/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://dudududukim.github.io/blog/2024/photo-gallery</id><content type="html" xml:base="https://dudududukim.github.io/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://dudududukim.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://dudududukim.github.io/blog/2024/tabs</id><content type="html" xml:base="https://dudududukim.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="e45c9c50-b7f8-4583-83e6-cf2fde267a8b" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="e45c9c50-b7f8-4583-83e6-cf2fde267a8b" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="bcd6836f-60b7-408a-9da6-d586e7ae7a85" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="bcd6836f-60b7-408a-9da6-d586e7ae7a85" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="fc2bec51-47b7-4257-bab4-7e48dc086c7d" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="fc2bec51-47b7-4257-bab4-7e48dc086c7d" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://dudududukim.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://dudududukim.github.io/blog/2024/typograms</id><content type="html" xml:base="https://dudududukim.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://dudududukim.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://dudududukim.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://dudududukim.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://dudududukim.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://dudududukim.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://dudududukim.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://dudududukim.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://dudududukim.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://dudududukim.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry></feed>